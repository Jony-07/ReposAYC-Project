/* The following code was generated by JFlex 1.4.3 on 17/11/21 2:47 */

package proyecto_catedra_ayc01t_sl190836_ml190272;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/11/21 2:47 from the specification file
 * <tt>C:/Users/Vere/OneDrive/Documentos/NetBeansProjects/ReposAYC-Project/src/proyecto_catedra_ayc01t_sl190836_ml190272/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 39,  0,  0,  0,  0,  0, 29, 30, 31, 25,  6, 48,  7, 49,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 36, 38, 40, 37,  0, 
     0, 10, 13,  8, 19, 17, 26, 43,  9, 14, 45, 42, 24, 27, 15, 21, 
    22, 46, 11, 20, 18, 23, 12, 28, 44, 16,  1, 34,  0, 35,  0, 47, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 32, 41, 33,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\20\2\1\6"+
    "\3\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\1\1\17\1\1\3\2\1\20\1\21"+
    "\1\4\10\2\1\22\11\2\1\23\1\2\1\24\1\25"+
    "\1\2\1\26\15\2\1\27\4\2\1\30\5\2\1\31"+
    "\1\2\1\32\23\2\1\0\2\2\1\33\12\2\1\34"+
    "\1\31\1\35\1\36\27\2\1\37\1\2\1\40\23\2"+
    "\1\41\6\2\1\42\3\2\1\43\6\2\1\44\6\2"+
    "\1\0\1\45\2\2\1\46\2\2\1\47\15\2\1\50"+
    "\1\51\2\2\1\52\5\2\1\53\6\2\1\54\1\55"+
    "\2\2\1\56\3\2\1\57\1\60\1\2\1\61\4\2"+
    "\1\62\5\2\1\63\1\64\11\2\1\24\1\65\1\66"+
    "\3\2\1\67\3\2\1\70\1\3\1\2\1\71\1\2"+
    "\1\72\1\2\1\73\4\2\1\74\1\75\1\2\1\76"+
    "\4\2\1\77\1\100\2\2\1\101\3\2\1\102\12\2"+
    "\1\103\1\104\1\2\1\105\1\106\1\107\1\2\1\110"+
    "\1\2\1\111\1\2\1\112\3\2\1\113\1\114\1\115"+
    "\1\116\1\117\2\2\1\120\1\121\1\122\1\2\1\123"+
    "\3\2\1\124\1\2\1\125\1\126\5\2\1\127\1\2"+
    "\1\130\1\131\1\132\1\133\1\2\1\134\1\135\2\2"+
    "\1\136\1\137\4\2\1\140\1\2\1\141\2\2\1\142"+
    "\1\143\1\144\1\145\3\2\1\146\2\2\1\147\1\150"+
    "\1\151\2\2\1\152\1\2\1\153\1\154\2\2\1\155"+
    "\3\2\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\62\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\62"+
    "\0\u044c\0\u047e\0\u04b0\0\62\0\u04e2\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\u0514\0\u0546\0\u0514\0\62\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\62\0\62\0\u0640\0\u0672\0\u06a4"+
    "\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\144\0\u09f6\0\u0a28\0\144\0\u0a5a\0\144\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\144\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\144\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\144"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\144\0\144\0\144\0\144\0\u15ae\0\u15e0"+
    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770"+
    "\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\144\0\u1a2c\0\144"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u0802\0\u1ce8\0\u1d1a"+
    "\0\u1d4c\0\u1d7e\0\u1db0\0\144\0\u1de2\0\u1e14\0\u1e46\0\u1e78"+
    "\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\144\0\u1fd6"+
    "\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166"+
    "\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\144\0\u2292\0\u22c4"+
    "\0\144\0\u22f6\0\u2328\0\144\0\u235a\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u25b2\0\144\0\144\0\u25e4\0\u2616\0\144\0\u2648\0\u267a"+
    "\0\u26ac\0\u26de\0\u2710\0\144\0\u2742\0\u2774\0\u27a6\0\u27d8"+
    "\0\u280a\0\u283c\0\144\0\144\0\u286e\0\u28a0\0\144\0\u28d2"+
    "\0\u2904\0\u2936\0\144\0\144\0\u2968\0\144\0\u299a\0\u29cc"+
    "\0\u29fe\0\u2a30\0\144\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\144\0\144\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56"+
    "\0\u2c88\0\u2cba\0\u2cec\0\144\0\144\0\144\0\u2d1e\0\u2d50"+
    "\0\u2d82\0\144\0\u2db4\0\u2de6\0\u2e18\0\144\0\62\0\u2e4a"+
    "\0\144\0\u2e7c\0\144\0\u2eae\0\144\0\u2ee0\0\u2f12\0\u2f44"+
    "\0\u2f76\0\144\0\144\0\u2fa8\0\144\0\u2fda\0\u300c\0\u303e"+
    "\0\u3070\0\144\0\144\0\u30a2\0\u30d4\0\144\0\u3106\0\u3138"+
    "\0\u316a\0\144\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\144\0\144\0\u3390\0\144"+
    "\0\144\0\144\0\u33c2\0\144\0\u33f4\0\144\0\u3426\0\144"+
    "\0\u3458\0\u348a\0\u34bc\0\144\0\144\0\144\0\144\0\144"+
    "\0\u34ee\0\u3520\0\144\0\144\0\144\0\u3552\0\144\0\u3584"+
    "\0\u35b6\0\u35e8\0\144\0\u361a\0\144\0\144\0\u364c\0\u367e"+
    "\0\u36b0\0\u36e2\0\u3714\0\144\0\u3746\0\144\0\144\0\144"+
    "\0\144\0\u3778\0\144\0\144\0\u37aa\0\u37dc\0\144\0\144"+
    "\0\u380e\0\u3840\0\u3872\0\u38a4\0\144\0\u38d6\0\144\0\u3908"+
    "\0\u393a\0\144\0\144\0\144\0\144\0\u396c\0\u399e\0\u39d0"+
    "\0\144\0\u3a02\0\u3a34\0\144\0\144\0\144\0\u3a66\0\u3a98"+
    "\0\144\0\u3aca\0\u3afc\0\144\0\u3b2e\0\u3b60\0\144\0\u3b92"+
    "\0\u3bc4\0\u3bf6\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\2\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\3\1\53\2\3\1\54\1\55"+
    "\63\0\2\3\5\0\21\3\1\0\3\3\15\0\6\3"+
    "\4\0\1\4\62\0\1\5\1\0\1\5\60\0\1\56"+
    "\56\0\2\3\5\0\1\3\1\57\1\60\1\61\11\3"+
    "\1\62\3\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\63\16\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\4\3\1\64\2\3\1\65\3\3"+
    "\1\66\1\67\3\3\1\70\1\0\1\71\2\3\15\0"+
    "\6\3\3\0\2\3\5\0\6\3\1\72\2\3\1\73"+
    "\3\3\1\74\1\3\1\75\1\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\2\3\1\76\3\3\1\77"+
    "\12\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\6\3\1\100\1\3\1\101\1\102\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\7\3\1\103\4\3"+
    "\1\104\3\3\1\105\1\0\1\106\2\3\15\0\6\3"+
    "\3\0\2\3\5\0\1\107\1\3\1\110\1\3\1\111"+
    "\4\3\1\112\3\3\1\113\1\3\1\114\1\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\7\3\1\115"+
    "\10\3\1\116\1\0\3\3\15\0\2\3\1\117\3\3"+
    "\3\0\2\3\5\0\1\3\1\120\1\121\1\122\4\3"+
    "\1\123\4\3\1\124\3\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\2\3\1\125\1\126\2\3\1\127"+
    "\2\3\1\130\3\3\1\131\3\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\1\3\1\132\6\3\1\133"+
    "\1\134\1\135\4\3\1\136\1\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\137\1\140\2\3"+
    "\1\141\2\3\1\142\4\3\1\143\1\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\144\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\7\3"+
    "\1\145\4\3\1\146\1\3\1\147\2\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\6\3\1\150\2\3"+
    "\1\151\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\152\1\153\2\3\1\154\6\3\1\155"+
    "\1\3\1\156\1\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\157\3\3\1\160\6\3\1\161"+
    "\3\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\3\1\162\1\3\1\163\2\3\1\164\12\3\1\0"+
    "\3\3\15\0\6\3\11\0\1\165\122\0\1\47\56\0"+
    "\1\47\2\0\1\47\62\0\1\47\11\0\2\3\5\0"+
    "\11\3\1\166\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\167\11\3\1\170\3\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\15\3\1\171"+
    "\3\3\1\0\3\3\15\0\6\3\2\0\5\56\1\0"+
    "\54\56\1\0\2\3\5\0\2\3\1\172\6\3\1\173"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\14\3\1\174\4\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\175\3\3\1\176\3\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\7\3\1\177"+
    "\7\3\1\200\1\201\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\4\3\1\202\14\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\3\3\15\0"+
    "\1\3\1\203\4\3\3\0\2\3\5\0\13\3\1\204"+
    "\5\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\13\3\1\205\5\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\1\206\20\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\12\3\1\207\6\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\210\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\1\3\1\211\4\3\3\0\2\3"+
    "\5\0\7\3\1\212\4\3\1\213\4\3\1\0\1\214"+
    "\2\3\15\0\6\3\3\0\2\3\5\0\17\3\1\215"+
    "\1\3\1\0\2\3\1\216\15\0\6\3\3\0\2\3"+
    "\5\0\20\3\1\217\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\220\14\3\1\221\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\222\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\7\3"+
    "\1\223\11\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\224\6\3\1\0\3\3\15\0\1\3"+
    "\1\225\4\3\3\0\2\3\5\0\7\3\1\226\2\3"+
    "\1\227\1\230\1\231\4\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\6\3\1\232\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\1\3\1\233\17\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\234\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\235\16\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\21\3\1\0\2\3\1\236\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\204\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\20\3\1\237"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\13\3"+
    "\1\240\5\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\14\3\1\241\4\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\1\242\5\3\1\243\12\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\244"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\5\3\1\245\13\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\246\3\3\1\247\10\3\1\250"+
    "\1\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\16\3\1\251\2\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\252\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\15\3\1\253\3\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\14\3\1\254"+
    "\4\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\255\13\3\1\256\3\3\1\257\1\0\1\260\2\3"+
    "\15\0\6\3\3\0\2\3\5\0\15\3\1\261\3\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\14\3"+
    "\1\262\4\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\263\7\3\1\264\5\3\1\265\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\2\3\1\266"+
    "\16\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\21\3\1\0\1\3\1\203\1\3\15\0\6\3\3\0"+
    "\2\3\5\0\13\3\1\267\5\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\270\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\20\3\1\271"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\1\3"+
    "\1\272\17\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\273\6\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\6\3\1\274\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\6\3\1\275\12\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\6\3"+
    "\1\276\2\3\1\277\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\13\3\1\300\5\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\21\3\1\0\3\3"+
    "\15\0\1\301\5\3\3\0\2\3\5\0\21\3\1\0"+
    "\1\302\2\3\15\0\6\3\3\0\2\3\5\0\20\3"+
    "\1\303\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\15\3\1\304\3\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\305\15\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\306\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\7\3\1\307"+
    "\10\3\1\310\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\3\3\15\0\2\3\1\203\3\3"+
    "\3\0\2\3\5\0\7\3\1\203\11\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\13\3\1\311\5\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\312\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\6\3\1\313\12\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\12\3\1\314\6\3\1\0\3\3"+
    "\15\0\6\3\4\0\1\315\60\0\2\3\5\0\10\3"+
    "\1\316\10\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\15\3\1\317\3\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\6\3\1\320\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\321\3\3"+
    "\1\322\11\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\323\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\324\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\2\3\1\325\16\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\14\3\1\326"+
    "\4\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\327\4\3\1\330\4\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\331\11\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\17\3\1\332"+
    "\1\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\6\3\1\333\12\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\334\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\335\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\1\3\1\302"+
    "\17\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\336\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\337\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\340\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\7\3\1\341"+
    "\11\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\14\3\1\342\4\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\343\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\1\107\4\3\1\344\13\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\17\3"+
    "\1\345\1\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\2\3\1\346\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\347\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\2\3\1\350"+
    "\15\0\6\3\3\0\2\3\5\0\6\3\1\351\12\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\352\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\353\3\3\1\354\3\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\355\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\356\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\3\3\15\0\1\357\5\3\3\0"+
    "\2\3\5\0\2\3\1\360\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\17\3\1\361\1\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\362"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\20\3\1\363\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\364\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\365\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\14\3\1\366\4\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\7\3"+
    "\1\367\11\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\20\3\1\370\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\7\3\1\371\11\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\3\3\15\0"+
    "\1\3\1\372\4\3\3\0\2\3\5\0\11\3\1\373"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\374\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\375\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\16\3\1\376\2\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\12\3\1\377"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\20\3\1\u0100\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\u0101\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\2\3\1\u0102\16\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\21\3\1\0\2\3"+
    "\1\u0103\15\0\6\3\3\0\2\3\5\0\12\3\1\u0104"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\u0105\15\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\u0106\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\u0107\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u0108"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\u0109\15\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\10\3\1\u010a\10\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\u010b\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u010c"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\u010d\5\3\1\u010e\3\3\1\0\1\3\1\u010f"+
    "\1\3\15\0\6\3\3\0\2\3\5\0\15\3\1\u0110"+
    "\3\3\1\0\3\3\15\0\4\3\1\u0111\1\3\3\0"+
    "\2\3\5\0\7\3\1\u0112\11\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\2\3\1\u0113\16\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u0114"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\12\3\1\u0115\6\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\14\3\1\250\4\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\1\3\1\u0116"+
    "\1\3\15\0\6\3\3\0\2\3\5\0\14\3\1\u0117"+
    "\4\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u0118\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\1\u0119\20\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\20\3\1\u011a\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\6\3\1\u011b\12\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u011c"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\12\3\1\u011d\6\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\1\3\1\u011e\17\3\1\0\3\3\15\0"+
    "\6\3\4\0\1\315\34\0\1\u011f\23\0\2\3\5\0"+
    "\17\3\1\u0120\1\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\7\3\1\u0121\11\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\3\3\15\0"+
    "\1\3\1\u0122\4\3\3\0\2\3\5\0\21\3\1\0"+
    "\3\3\15\0\1\u0123\5\3\3\0\2\3\5\0\12\3"+
    "\1\u0124\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\14\3\1\u0125\4\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u0126\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\u0127\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\203\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\1\3\1\u0128\1\3\15\0\6\3"+
    "\3\0\2\3\5\0\7\3\1\u0129\11\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u012a\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\3\3"+
    "\1\u012b\15\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\1\3\1\u012c\1\3\15\0\6\3"+
    "\3\0\2\3\5\0\12\3\1\u012d\6\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u012e\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\13\3"+
    "\1\203\5\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\6\3\1\100\12\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u012f\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u0130\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0131\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\7\3\1\u0132\11\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\3\3\1\u0133\15\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u0134\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\2\3\1\205\3\3\3\0\2\3"+
    "\5\0\3\3\1\u0135\15\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u0136\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\321\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\3\3"+
    "\1\u0137\15\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\107\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\16\3\1\u0138\2\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0139\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u013a"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\14\3\1\u013b\4\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\21\3\1\0\3\3\15\0\1\3\1\u013c"+
    "\4\3\3\0\2\3\5\0\5\3\1\u013d\13\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\6\3\1\u013e"+
    "\12\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\u013f\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0140\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\17\3\1\u0141\1\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u0142"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\u0143\20\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\u0144\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0145\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\u0146\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u0147"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\u0148\15\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0149\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\u014a\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\2\3\1\u014b"+
    "\16\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\u014c\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\17\3\1\u014d\1\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\3\3\15\0"+
    "\1\3\1\u014e\4\3\3\0\2\3\5\0\12\3\1\u014f"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\12\3\1\u0150\6\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\6\3\1\u0151\12\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0152\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\21\3\1\0"+
    "\1\u0153\2\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0154\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\u0155\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\16\3\1\u0156\2\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\u0157\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0158\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\u0159\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\u015a\15\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\u015b\11\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\21\3\1\0"+
    "\3\3\15\0\1\3\1\u015c\4\3\3\0\2\3\5\0"+
    "\11\3\1\u015d\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\u015e\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\u015f\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\10\3\1\321"+
    "\10\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u0160\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\4\3\1\u0161\7\3\1\u0162\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\12\3\1\u0163"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\u0164\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0165\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\u0166\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\2\3\1\u0167"+
    "\16\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u0168\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\u0169\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\u016a\11\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u016b"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u016c\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\20\3\1\u016d\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\21\3\1\0\1\3\1\u016e\1\3"+
    "\15\0\6\3\3\0\2\3\5\0\1\3\1\u016f\17\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\u0170\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\14\3\1\u0171\4\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\3\3\1\u0172\15\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\u0173\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0174\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\3\3\15\0\1\3\1\u0175\4\3"+
    "\3\0\2\3\5\0\6\3\1\u0176\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\10\3\1\u0177\10\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\u0178\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\u0179\16\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\7\3\1\u017a\11\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\7\3\1\u0114\11\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\2\3"+
    "\1\u017b\16\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\u017c\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\20\3\1\u017d\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\1\u017e\20\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u017f\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\14\3"+
    "\1\u0180\4\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\u0181\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\u0182\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0183\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\10\3\1\u0184"+
    "\10\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\u0185\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\15\3\1\u0186\3\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\6\3\1\u0187\12\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\1\u0188\20\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\20\3"+
    "\1\u0189\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\u018a\20\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\u018b\6\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u018c\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\u018d\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\7\3"+
    "\1\u018e\11\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\7\3\1\u018f\11\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u0190\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\u0191\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\6\3"+
    "\1\u0192\12\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\u0193\6\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\14\3\1\u0194\4\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\15\3\1\u0195\3\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\5\3\1\u0196\3\0\2\3\5\0"+
    "\7\3\1\u0197\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0198\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\10\3\1\u0199\10\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\16\3\1\u019a"+
    "\2\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u019b\7\3\1\0\3\3\15\0\6\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\20\1\1\11\3\1\1\11"+
    "\1\1\6\11\3\1\1\11\4\1\2\11\107\1\1\0"+
    "\127\1\1\0\121\1\1\11\174\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 69: 
          { return new Symbol(sym.OUTER, yychar, yyline, yytext());
          }
        case 111: break;
        case 104: 
          { return new Symbol(sym.DISTINCT, yychar, yyline, yytext());
          }
        case 112: break;
        case 32: 
          { return new Symbol(sym.END, yychar, yyline, yytext());
          }
        case 113: break;
        case 100: 
          { return new Symbol(sym.PRIMARY, yychar, yyline, yytext());
          }
        case 114: break;
        case 15: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 115: break;
        case 38: 
          { return new Symbol(sym.T_dato, yychar, yyline, yytext());
          }
        case 116: break;
        case 34: 
          { return new Symbol(sym.OUT, yychar, yyline, yytext());
          }
        case 117: break;
        case 92: 
          { return new Symbol(sym.UNIQUE, yychar, yyline, yytext());
          }
        case 118: break;
        case 49: 
          { return new Symbol(sym.DROP, yychar, yyline, yytext());
          }
        case 119: break;
        case 6: 
          { return new Symbol(sym.All, yychar, yyline, yytext());
          }
        case 120: break;
        case 87: 
          { return new Symbol(sym.DELETE, yychar, yyline, yytext());
          }
        case 121: break;
        case 53: 
          { return new Symbol(sym.LR, yychar, yyline, yytext());
          }
        case 122: break;
        case 36: 
          { return new Symbol(sym.FOR, yychar, yyline, yytext());
          }
        case 123: break;
        case 71: 
          { return new Symbol(sym.PRIOR, yychar, yyline, yytext());
          }
        case 124: break;
        case 108: 
          { return new Symbol(sym.REFERENCES, yychar, yyline, yytext());
          }
        case 125: break;
        case 22: 
          { return new Symbol(sym.IF, yychar, yyline, yytext());
          }
        case 126: break;
        case 59: 
          { return new Symbol(sym.CROSS, yychar, yyline, yytext());
          }
        case 127: break;
        case 25: 
          { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
          }
        case 128: break;
        case 35: 
          { return new Symbol(sym.USE, yychar, yyline, yytext());
          }
        case 129: break;
        case 72: 
          { return new Symbol(sym.UNION, yychar, yyline, yytext());
          }
        case 130: break;
        case 52: 
          { return new Symbol(sym.ONLY, yychar, yyline, yytext());
          }
        case 131: break;
        case 56: 
          { return new Symbol(sym.WITH, yychar, yyline, yytext());
          }
        case 132: break;
        case 20: 
          { return new Symbol(sym.C_seleccion, yychar, yyline, yytext());
          }
        case 133: break;
        case 88: 
          { return new Symbol(sym.SYSTEM, yychar, yyline, yytext());
          }
        case 134: break;
        case 8: 
          { return new Symbol(sym.P_a, yychar, yyline, yytext());
          }
        case 135: break;
        case 24: 
          { return new Symbol(sym.DO, yychar, yyline, yytext());
          }
        case 136: break;
        case 10: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 137: break;
        case 89: 
          { return new Symbol(sym.SEARCH, yychar, yyline, yytext());
          }
        case 138: break;
        case 4: 
          { /*Ignore*/
          }
        case 139: break;
        case 42: 
          { return new Symbol(sym.VIEW, yychar, yyline, yytext());
          }
        case 140: break;
        case 33: 
          { return new Symbol(sym.SET, yychar, yyline, yytext());
          }
        case 141: break;
        case 16: 
          { return new Symbol(sym.COMA, yychar, yyline, yytext());
          }
        case 142: break;
        case 51: 
          { return new Symbol(sym.OVER, yychar, yyline, yytext());
          }
        case 143: break;
        case 107: 
          { return new Symbol(sym.CONSTRAINT, yychar, yyline, yytext());
          }
        case 144: break;
        case 91: 
          { return new Symbol(sym.OTHERS, yychar, yyline, yytext());
          }
        case 145: break;
        case 54: 
          { return new Symbol(sym.FROM, yychar, yyline, yytext());
          }
        case 146: break;
        case 103: 
          { return new Symbol(sym.DATABASE, yychar, yyline, yytext());
          }
        case 147: break;
        case 77: 
          { return new Symbol(sym.GROUP, yychar, yyline, yytext());
          }
        case 148: break;
        case 76: 
          { return new Symbol(sym.WRITE, yychar, yyline, yytext());
          }
        case 149: break;
        case 94: 
          { return new Symbol(sym.MODIFY, yychar, yyline, yytext());
          }
        case 150: break;
        case 82: 
          { return new Symbol(sym.RENAME, yychar, yyline, yytext());
          }
        case 151: break;
        case 14: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 152: break;
        case 96: 
          { return new Symbol(sym.NATURAL, yychar, yyline, yytext());
          }
        case 153: break;
        case 5: 
          { return new Symbol(sym.Operadores, yychar, yyline, yytext());
          }
        case 154: break;
        case 30: 
          { return new Symbol(sym.T_order, yychar, yyline, yytext());
          }
        case 155: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 156: break;
        case 7: 
          { return new Symbol(sym.COMILLA, yychar, yyline, yytext());
          }
        case 157: break;
        case 109: 
          { return new Symbol(sym.TRANSACTION, yychar, yyline, yytext());
          }
        case 158: break;
        case 19: 
          { return new Symbol(sym.BY, yychar, yyline, yytext());
          }
        case 159: break;
        case 102: 
          { return new Symbol(sym.INTERVAL, yychar, yyline, yytext());
          }
        case 160: break;
        case 44: 
          { return new Symbol(sym.NULL, yychar, yyline, yytext());
          }
        case 161: break;
        case 80: 
          { return new Symbol(sym.COLUMN, yychar, yyline, yytext());
          }
        case 162: break;
        case 23: 
          { return new Symbol(sym.TO, yychar, yyline, yytext());
          }
        case 163: break;
        case 62: 
          { return new Symbol(sym.RESET, yychar, yyline, yytext());
          }
        case 164: break;
        case 68: 
          { return new Symbol(sym.ORDER, yychar, yyline, yytext());
          }
        case 165: break;
        case 106: 
          { return new Symbol(sym.INTERSECT, yychar, yyline, yytext());
          }
        case 166: break;
        case 98: 
          { return new Symbol(sym.DECLARE, yychar, yyline, yytext());
          }
        case 167: break;
        case 81: 
          { return new Symbol(sym.HAVING, yychar, yyline, yytext());
          }
        case 168: break;
        case 55: 
          { return new Symbol(sym.FULL, yychar, yyline, yytext());
          }
        case 169: break;
        case 97: 
          { return new Symbol(sym.TRIGGER, yychar, yyline, yytext());
          }
        case 170: break;
        case 40: 
          { return new Symbol(sym.ROWS, yychar, yyline, yytext());
          }
        case 171: break;
        case 70: 
          { return new Symbol(sym.PRINT, yychar, yyline, yytext());
          }
        case 172: break;
        case 84: 
          { return new Symbol(sym.INSERT, yychar, yyline, yytext());
          }
        case 173: break;
        case 17: 
          { return new Symbol(sym.POINT, yychar, yyline, yytext());
          }
        case 174: break;
        case 65: 
          { return new Symbol(sym.ILIKE, yychar, yyline, yytext());
          }
        case 175: break;
        case 41: 
          { return new Symbol(sym.RULE, yychar, yyline, yytext());
          }
        case 176: break;
        case 75: 
          { return new Symbol(sym.WHERE, yychar, yyline, yytext());
          }
        case 177: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 178: break;
        case 13: 
          { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
          }
        case 179: break;
        case 67: 
          { return new Symbol(sym.START, yychar, yyline, yytext());
          }
        case 180: break;
        case 18: 
          { return new Symbol(sym.AS, yychar, yyline, yytext());
          }
        case 181: break;
        case 39: 
          { return new Symbol(sym.CASE, yychar, yyline, yytext());
          }
        case 182: break;
        case 60: 
          { return new Symbol(sym.ALTER, yychar, yyline, yytext());
          }
        case 183: break;
        case 45: 
          { return new Symbol(sym.ELSE, yychar, yyline, yytext());
          }
        case 184: break;
        case 93: 
          { return new Symbol(sym.UPDATE, yychar, yyline, yytext());
          }
        case 185: break;
        case 28: 
          { return new Symbol(sym.FUN, yychar, yyline, yytext());
          }
        case 186: break;
        case 31: 
          { return new Symbol(sym.NEW, yychar, yyline, yytext());
          }
        case 187: break;
        case 61: 
          { return new Symbol(sym.AFTER, yychar, yyline, yytext());
          }
        case 188: break;
        case 43: 
          { return new Symbol(sym.INTO, yychar, yyline, yytext());
          }
        case 189: break;
        case 21: 
          { return new Symbol(sym.IS, yychar, yyline, yytext());
          }
        case 190: break;
        case 86: 
          { return new Symbol(sym.EXISTS, yychar, yyline, yytext());
          }
        case 191: break;
        case 74: 
          { return new Symbol(sym.FIRST, yychar, yyline, yytext());
          }
        case 192: break;
        case 57: 
          { return new Symbol(sym.JOIN, yychar, yyline, yytext());
          }
        case 193: break;
        case 78: 
          { return new Symbol(sym.CHANGE, yychar, yyline, yytext());
          }
        case 194: break;
        case 85: 
          { return new Symbol(sym.EXCEPT, yychar, yyline, yytext());
          }
        case 195: break;
        case 11: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 196: break;
        case 46: 
          { return new Symbol(sym.THEN, yychar, yyline, yytext());
          }
        case 197: break;
        case 50: 
          { return new Symbol(sym.SHOW, yychar, yyline, yytext());
          }
        case 198: break;
        case 47: 
          { return new Symbol(sym.BOOL, yychar, yyline, yytext());
          }
        case 199: break;
        case 99: 
          { return new Symbol(sym.DEFAULT, yychar, yyline, yytext());
          }
        case 200: break;
        case 9: 
          { return new Symbol(sym.P_c, yychar, yyline, yytext());
          }
        case 201: break;
        case 101: 
          { return new Symbol(sym.FOREIGN, yychar, yyline, yytext());
          }
        case 202: break;
        case 64: 
          { return new Symbol(sym.INNER, yychar, yyline, yytext());
          }
        case 203: break;
        case 37: 
          { return new Symbol(sym.KEY, yychar, yyline, yytext());
          }
        case 204: break;
        case 48: 
          { return new Symbol(sym.TYPE, yychar, yyline, yytext());
          }
        case 205: break;
        case 79: 
          { return new Symbol(sym.CREATE, yychar, yyline, yytext());
          }
        case 206: break;
        case 66: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 207: break;
        case 26: 
          { return new Symbol(sym.ON, yychar, yyline, yytext());
          }
        case 208: break;
        case 105: 
          { return new Symbol(sym.FUNCTION, yychar, yyline, yytext());
          }
        case 209: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 210: break;
        case 90: 
          { return new Symbol(sym.SELECT, yychar, yyline, yytext());
          }
        case 211: break;
        case 83: 
          { return new Symbol(sym.VALUES, yychar, yyline, yytext());
          }
        case 212: break;
        case 95: 
          { return new Symbol(sym.CONNECT, yychar, yyline, yytext());
          }
        case 213: break;
        case 29: 
          { return new Symbol(sym.ADD, yychar, yyline, yytext());
          }
        case 214: break;
        case 73: 
          { return new Symbol(sym.USING, yychar, yyline, yytext());
          }
        case 215: break;
        case 58: 
          { return new Symbol(sym.CHECK, yychar, yyline, yytext());
          }
        case 216: break;
        case 27: 
          { return new Symbol(sym.GO, yychar, yyline, yytext());
          }
        case 217: break;
        case 110: 
          { return new Symbol(sym.CONSTRAINT_TYPE, yychar, yyline, yytext());
          }
        case 218: break;
        case 63: 
          { return new Symbol(sym.BEGIN, yychar, yyline, yytext());
          }
        case 219: break;
        case 12: 
          { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
