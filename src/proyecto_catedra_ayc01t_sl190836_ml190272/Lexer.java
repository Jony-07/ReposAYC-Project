/* The following code was generated by JFlex 1.4.3 on 17/11/21 2:47 */

package proyecto_catedra_ayc01t_sl190836_ml190272;
import static proyecto_catedra_ayc01t_sl190836_ml190272.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/11/21 2:47 from the specification file
 * <tt>C:/Users/Vere/OneDrive/Documentos/NetBeansProjects/ReposAYC-Project/src/proyecto_catedra_ayc01t_sl190836_ml190272/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\50\5\0\1\35"+
    "\1\36\1\37\1\31\1\6\1\60\1\7\1\61\1\4\12\2\1\0"+
    "\1\44\1\47\1\51\1\46\2\0\1\12\1\15\1\10\1\23\1\21"+
    "\1\32\1\53\1\11\1\16\1\55\1\52\1\30\1\33\1\17\1\25"+
    "\1\26\1\56\1\13\1\24\1\22\1\27\1\14\1\34\1\54\1\20"+
    "\1\1\1\42\1\0\1\43\1\0\1\57\1\0\32\1\1\40\1\45"+
    "\1\41\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\20\2\1\7\3\2\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\2\20\1\1\1\20\3\2"+
    "\1\21\1\22\1\4\10\2\1\23\11\2\1\24\1\2"+
    "\1\25\1\26\1\2\1\27\15\2\1\30\4\2\1\31"+
    "\5\2\1\32\1\2\1\33\23\2\1\0\1\32\2\2"+
    "\1\34\12\2\1\35\1\32\1\36\1\37\27\2\1\40"+
    "\1\2\1\41\23\2\1\42\6\2\1\43\3\2\1\44"+
    "\6\2\1\45\6\2\1\0\1\46\2\2\1\47\2\2"+
    "\1\50\15\2\1\51\1\52\2\2\1\53\5\2\1\54"+
    "\6\2\1\55\1\56\2\2\1\57\3\2\1\60\1\61"+
    "\1\2\1\62\4\2\1\63\5\2\1\64\1\65\11\2"+
    "\1\25\1\66\1\67\3\2\1\70\2\2\1\71\1\2"+
    "\1\72\1\3\1\2\1\73\1\2\1\74\1\2\1\75"+
    "\4\2\1\76\1\77\1\2\1\100\4\2\1\101\1\102"+
    "\1\2\1\103\1\2\1\104\3\2\1\105\12\2\1\106"+
    "\1\107\1\2\1\110\1\111\1\112\1\2\1\113\1\2"+
    "\1\114\1\2\1\115\3\2\1\116\1\117\1\120\1\121"+
    "\1\122\2\2\1\123\1\124\1\125\1\2\1\126\3\2"+
    "\1\127\1\2\1\130\1\131\5\2\1\132\1\2\1\133"+
    "\1\134\1\135\1\136\1\2\1\137\2\2\1\140\1\141"+
    "\4\2\1\142\1\2\1\143\2\2\1\144\1\145\1\146"+
    "\1\147\3\2\1\150\2\2\1\151\1\152\1\153\2\2"+
    "\1\154\1\2\1\155\1\156\2\2\1\157\3\2\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\62\0\62"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\62\0\u044c\0\u047e\0\u04b0\0\62\0\u04e2\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\u0514\0\u0546\0\u0578\0\u0546"+
    "\0\62\0\u05aa\0\u05dc\0\u060e\0\62\0\62\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\144\0\u09f6\0\u0a28\0\144\0\u0a5a\0\144\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\144\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\144\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\62\0\u1356"+
    "\0\u1388\0\144\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\144\0\144\0\144\0\144"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\144"+
    "\0\u1a2c\0\144\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u0802"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\144\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4"+
    "\0\144\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\144"+
    "\0\u2292\0\u22c4\0\144\0\u22f6\0\u2328\0\144\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\u254e\0\u2580\0\u25b2\0\144\0\144\0\u25e4\0\u2616\0\144"+
    "\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\144\0\u2742\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\144\0\144\0\u286e\0\u28a0"+
    "\0\144\0\u28d2\0\u2904\0\u2936\0\144\0\144\0\u2968\0\144"+
    "\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\144\0\u2a62\0\u2a94\0\u2ac6"+
    "\0\u2af8\0\u2b2a\0\144\0\144\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2"+
    "\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\144\0\144\0\144"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\144\0\u2db4\0\u2de6\0\144\0\u2e18"+
    "\0\144\0\62\0\u2e4a\0\144\0\u2e7c\0\144\0\u2eae\0\144"+
    "\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\144\0\144\0\u2fa8\0\144"+
    "\0\u2fda\0\u300c\0\u303e\0\u3070\0\144\0\144\0\u30a2\0\144"+
    "\0\u30d4\0\144\0\u3106\0\u3138\0\u316a\0\144\0\u319c\0\u31ce"+
    "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e"+
    "\0\144\0\144\0\u3390\0\144\0\144\0\144\0\u33c2\0\144"+
    "\0\u33f4\0\144\0\u3426\0\144\0\u3458\0\u348a\0\u34bc\0\144"+
    "\0\144\0\144\0\144\0\144\0\u34ee\0\u3520\0\144\0\144"+
    "\0\144\0\u3552\0\144\0\u3584\0\u35b6\0\u35e8\0\144\0\u361a"+
    "\0\144\0\144\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\144"+
    "\0\u3746\0\144\0\144\0\144\0\144\0\u3778\0\144\0\u37aa"+
    "\0\u37dc\0\144\0\144\0\u380e\0\u3840\0\u3872\0\u38a4\0\144"+
    "\0\u38d6\0\144\0\u3908\0\u393a\0\144\0\144\0\144\0\144"+
    "\0\u396c\0\u399e\0\u39d0\0\144\0\u3a02\0\u3a34\0\144\0\144"+
    "\0\144\0\u3a66\0\u3a98\0\144\0\u3aca\0\u3afc\0\144\0\u3b2e"+
    "\0\u3b60\0\144\0\u3b92\0\u3bc4\0\u3bf6\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\3\1\54\2\3\1\55\1\56"+
    "\63\0\2\3\5\0\21\3\1\0\3\3\15\0\6\3"+
    "\4\0\1\4\62\0\1\5\62\0\1\57\56\0\2\3"+
    "\5\0\1\3\1\60\1\61\1\62\11\3\1\63\3\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\2\3"+
    "\1\64\16\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\4\3\1\65\2\3\1\66\3\3\1\67\1\70"+
    "\3\3\1\71\1\0\1\72\2\3\15\0\6\3\3\0"+
    "\2\3\5\0\6\3\1\73\2\3\1\74\3\3\1\75"+
    "\1\3\1\76\1\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\77\3\3\1\100\12\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\6\3\1\101"+
    "\1\3\1\102\1\103\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\7\3\1\104\4\3\1\105\3\3"+
    "\1\106\1\0\1\107\2\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\110\1\3\1\111\1\3\1\112\4\3\1\113"+
    "\3\3\1\114\1\3\1\115\1\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\116\10\3\1\117"+
    "\1\0\3\3\15\0\2\3\1\120\3\3\3\0\2\3"+
    "\5\0\1\3\1\121\1\122\1\123\4\3\1\124\4\3"+
    "\1\125\3\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\126\1\127\2\3\1\130\2\3\1\131"+
    "\3\3\1\132\3\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\1\3\1\133\6\3\1\134\1\135\1\136"+
    "\4\3\1\137\1\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\140\1\141\2\3\1\142\2\3"+
    "\1\143\4\3\1\144\1\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\3\3\1\145\15\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\7\3\1\146\4\3"+
    "\1\147\1\3\1\150\2\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\6\3\1\151\2\3\1\152\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\2\3"+
    "\1\153\1\154\2\3\1\155\6\3\1\156\1\3\1\157"+
    "\1\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\160\3\3\1\161\6\3\1\162\3\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\1\3\1\163"+
    "\1\3\1\164\2\3\1\165\12\3\1\0\3\3\15\0"+
    "\6\3\11\0\1\166\117\0\1\167\65\0\1\51\56\0"+
    "\1\51\2\0\1\51\11\0\2\3\5\0\11\3\1\170"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\171\11\3\1\172\3\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\15\3\1\173\3\3\1\0"+
    "\3\3\15\0\6\3\2\0\5\57\1\0\54\57\1\0"+
    "\2\3\5\0\2\3\1\174\6\3\1\175\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\14\3\1\176"+
    "\4\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\177\3\3\1\200\3\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\201\7\3\1\202"+
    "\1\203\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\4\3\1\204\14\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\21\3\1\0\3\3\15\0\1\3\1\205"+
    "\4\3\3\0\2\3\5\0\13\3\1\206\5\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\13\3\1\207"+
    "\5\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\210\20\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\211\6\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\12\3\1\212\6\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\21\3\1\0\3\3"+
    "\15\0\1\3\1\213\4\3\3\0\2\3\5\0\7\3"+
    "\1\214\4\3\1\215\4\3\1\0\1\216\2\3\15\0"+
    "\6\3\3\0\2\3\5\0\17\3\1\217\1\3\1\0"+
    "\2\3\1\220\15\0\6\3\3\0\2\3\5\0\20\3"+
    "\1\221\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\222\14\3\1\223\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\224\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\7\3\1\225\11\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\226\6\3\1\0\3\3\15\0\1\3\1\227\4\3"+
    "\3\0\2\3\5\0\7\3\1\230\2\3\1\231\1\232"+
    "\1\233\4\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\6\3\1\234\12\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\1\3\1\235\17\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\236\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\2\3"+
    "\1\237\16\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\2\3\1\240\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\206\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\20\3\1\241\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\13\3\1\242\5\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\14\3"+
    "\1\243\4\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\244\5\3\1\245\12\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\246\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\5\3\1\247"+
    "\13\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\250\3\3\1\251\10\3\1\252\1\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\16\3\1\253"+
    "\2\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\12\3\1\254\6\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\15\3\1\255\3\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\256\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\1\257\13\3"+
    "\1\260\3\3\1\261\1\0\1\262\2\3\15\0\6\3"+
    "\3\0\2\3\5\0\15\3\1\263\3\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\14\3\1\264\4\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\2\3"+
    "\1\265\7\3\1\266\5\3\1\267\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\2\3\1\270\16\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\21\3\1\0"+
    "\1\3\1\205\1\3\15\0\6\3\3\0\2\3\5\0"+
    "\13\3\1\271\5\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\272\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\20\3\1\273\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\1\3\1\274\17\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\275\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\6\3\1\276\12\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\6\3\1\277\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\6\3\1\300\2\3"+
    "\1\301\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\13\3\1\302\5\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\21\3\1\0\3\3\15\0\1\303"+
    "\5\3\3\0\2\3\5\0\21\3\1\0\1\304\2\3"+
    "\15\0\6\3\3\0\2\3\5\0\20\3\1\305\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\15\3\1\306"+
    "\3\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\307\15\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\310\15\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\311\10\3\1\312"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\2\3\1\205\3\3\3\0\2\3"+
    "\5\0\7\3\1\205\11\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\13\3\1\313\5\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\314\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\6\3"+
    "\1\315\12\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\316\6\3\1\0\3\3\15\0\6\3"+
    "\4\0\1\317\60\0\2\3\5\0\10\3\1\320\10\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\15\3"+
    "\1\321\3\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\6\3\1\322\12\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\3\3\1\323\3\3\1\324\11\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\1\325"+
    "\20\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\326\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\327\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\330\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\7\3\1\331"+
    "\4\3\1\332\4\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\7\3\1\333\11\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\17\3\1\334\1\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\6\3\1\335"+
    "\12\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\336\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\337\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\1\3\1\304\17\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\2\3\1\340"+
    "\16\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\341\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\342\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\343\11\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\14\3\1\344"+
    "\4\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\345\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\1\110\4\3\1\346\13\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\17\3\1\347\1\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\2\3\1\350\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\351\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\21\3\1\0\2\3\1\352\15\0\6\3"+
    "\3\0\2\3\5\0\6\3\1\353\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\354\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\355\3\3\1\356\3\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\357\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\360\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\1\361\5\3\3\0\2\3\5\0"+
    "\2\3\1\362\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\17\3\1\363\1\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\364\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\20\3\1\365"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\366\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\367\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\14\3\1\370\4\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\7\3\1\371\11\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\20\3"+
    "\1\372\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\373\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\21\3\1\0\3\3\15\0\1\3\1\374"+
    "\4\3\3\0\2\3\5\0\11\3\1\375\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\376"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\377\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\16\3\1\u0100\2\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0101\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\20\3\1\u0102"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0103\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\u0104\16\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\21\3\1\0\2\3\1\u0105\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0106\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u0107"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u0108\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\u0109\15\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\u010a\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u010b"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\10\3\1\u010c\10\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\u010d\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\u010e\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\7\3\1\u010f"+
    "\5\3\1\u0110\3\3\1\0\1\3\1\u0111\1\3\15\0"+
    "\6\3\3\0\2\3\5\0\15\3\1\u0112\3\3\1\0"+
    "\3\3\15\0\4\3\1\u0113\1\3\3\0\2\3\5\0"+
    "\7\3\1\u0114\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\u0115\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\11\3\1\u0116\7\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\12\3\1\u0117"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\14\3\1\252\4\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\21\3\1\0\1\3\1\u0118\1\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\u0119\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u011a"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\u011b\20\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\20\3\1\u011c\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\6\3\1\u011d\12\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\u011e\3\3\1\u011f"+
    "\11\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\12\3\1\u0120\6\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\1\3\1\u0121\17\3\1\0\3\3\15\0"+
    "\6\3\4\0\1\317\34\0\1\u0122\23\0\2\3\5\0"+
    "\17\3\1\u0123\1\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\7\3\1\u0124\11\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\3\3\15\0"+
    "\1\3\1\u0125\4\3\3\0\2\3\5\0\21\3\1\0"+
    "\3\3\15\0\1\u0126\5\3\3\0\2\3\5\0\12\3"+
    "\1\u0127\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\14\3\1\u0128\4\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u0129\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\u012a\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\205\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\1\3\1\u012b\1\3\15\0\6\3"+
    "\3\0\2\3\5\0\7\3\1\u012c\11\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u012d\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\3\3"+
    "\1\u012e\15\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\1\3\1\u012f\1\3\15\0\6\3"+
    "\3\0\2\3\5\0\12\3\1\u0130\6\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u0131\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\13\3"+
    "\1\205\5\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\6\3\1\101\12\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u0132\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u0133\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0134\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\7\3\1\u0135\11\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\3\3\1\u0136\15\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u0137\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\2\3\1\u0138\3\3\3\0\2\3"+
    "\5\0\3\3\1\u0139\15\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u013a\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\323\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\3\3"+
    "\1\u013b\15\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\110\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\16\3\1\u013c\2\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u013d\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u013e"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\14\3\1\u013f\4\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\21\3\1\0\3\3\15\0\1\3\1\u0140"+
    "\4\3\3\0\2\3\5\0\5\3\1\u0141\13\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\6\3\1\u0142"+
    "\12\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\u0143\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0144\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\17\3\1\u0145\1\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\11\3\1\u0146"+
    "\7\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\u0147\20\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\u0148\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0149\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\u014a\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u014b"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\3\3\1\u014c\15\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u014d\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\3\3\1\u014e\15\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\2\3\1\u014f"+
    "\16\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\u0150\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\17\3\1\u0151\1\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\21\3\1\0\3\3\15\0"+
    "\1\3\1\u0152\4\3\3\0\2\3\5\0\12\3\1\u0153"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\12\3\1\u0154\6\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\6\3\1\u0155\12\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0156\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\21\3\1\0"+
    "\1\u0157\2\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0158\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\u0159\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\16\3\1\u015a\2\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\u015b\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u015c\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\u015d\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\3\3\1\u015e\15\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\u015f\11\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\21\3\1\0"+
    "\3\3\15\0\1\3\1\u0160\4\3\3\0\2\3\5\0"+
    "\11\3\1\u0161\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\u0162\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\u0163\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\10\3\1\323"+
    "\10\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u0164\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\4\3\1\u0165\7\3\1\u0166\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\12\3\1\u0167"+
    "\6\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\2\3\1\u0168\16\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u0169\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\14\3\1\u016a\4\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\2\3\1\u016b"+
    "\16\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u016c\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\2\3\1\u016d\16\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\7\3\1\u016e\11\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\3\3\1\u016f"+
    "\15\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u0170\7\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\20\3\1\u0171\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\21\3\1\0\1\3\1\u0172\1\3"+
    "\15\0\6\3\3\0\2\3\5\0\1\3\1\u0173\17\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\u0174\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\14\3\1\u0175\4\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\3\3\1\u0176\15\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\11\3\1\u0177\7\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\11\3"+
    "\1\u0163\7\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\21\3\1\0\3\3\15\0\1\3\1\u0178\4\3"+
    "\3\0\2\3\5\0\6\3\1\u0179\12\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\10\3\1\u017a\10\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\12\3"+
    "\1\u017b\6\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\2\3\1\u017c\16\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\7\3\1\u017d\11\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\7\3\1\u0116\11\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\2\3"+
    "\1\u017e\16\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\11\3\1\u017f\7\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\20\3\1\u0180\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\1\u0181\20\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\3\3\1\u0182\15\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\14\3"+
    "\1\u0183\4\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\1\u0184\20\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\11\3\1\u0185\7\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\12\3\1\u0186\6\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\10\3\1\u0187"+
    "\10\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\7\3\1\u0188\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\15\3\1\u0189\3\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\6\3\1\u018a\12\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\1\u018b\20\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\20\3"+
    "\1\u018c\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\1\u018d\20\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\u018e\6\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u018f\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\u0190\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\7\3"+
    "\1\u0191\11\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\7\3\1\u0192\11\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\11\3\1\u0193\7\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\12\3\1\u0194\6\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\6\3"+
    "\1\u0195\12\3\1\0\3\3\15\0\6\3\3\0\2\3"+
    "\5\0\12\3\1\u0196\6\3\1\0\3\3\15\0\6\3"+
    "\3\0\2\3\5\0\14\3\1\u0197\4\3\1\0\3\3"+
    "\15\0\6\3\3\0\2\3\5\0\15\3\1\u0198\3\3"+
    "\1\0\3\3\15\0\6\3\3\0\2\3\5\0\21\3"+
    "\1\0\3\3\15\0\5\3\1\u0199\3\0\2\3\5\0"+
    "\7\3\1\u019a\11\3\1\0\3\3\15\0\6\3\3\0"+
    "\2\3\5\0\12\3\1\u019b\6\3\1\0\3\3\15\0"+
    "\6\3\3\0\2\3\5\0\10\3\1\u019c\10\3\1\0"+
    "\3\3\15\0\6\3\3\0\2\3\5\0\16\3\1\u019d"+
    "\2\3\1\0\3\3\15\0\6\3\3\0\2\3\5\0"+
    "\11\3\1\u019e\7\3\1\0\3\3\15\0\6\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\20\1\1\11\3\1\1\11"+
    "\1\1\6\11\4\1\1\11\3\1\2\11\107\1\1\0"+
    "\1\11\127\1\1\0\122\1\1\11\174\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 103: 
          { lexeme=yytext(); return FOREIGN;
          }
        case 112: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 113: break;
        case 61: 
          { lexeme=yytext(); return CROSS;
          }
        case 114: break;
        case 83: 
          { lexeme=yytext(); return COLUMN;
          }
        case 115: break;
        case 20: 
          { lexeme=yytext(); return BY;
          }
        case 116: break;
        case 94: 
          { lexeme=yytext(); return OTHERS;
          }
        case 117: break;
        case 90: 
          { lexeme=yytext(); return DELETE;
          }
        case 118: break;
        case 19: 
          { lexeme=yytext(); return AS;
          }
        case 119: break;
        case 69: 
          { lexeme=yytext(); return TABLE;
          }
        case 120: break;
        case 8: 
          { lexeme=yytext(); return COMILLA;
          }
        case 121: break;
        case 67: 
          { lexeme=yytext(); return INDEX;
          }
        case 122: break;
        case 49: 
          { lexeme=yytext(); return TYPE;
          }
        case 123: break;
        case 80: 
          { lexeme=yytext(); return GROUP;
          }
        case 124: break;
        case 72: 
          { lexeme=yytext(); return OUTER;
          }
        case 125: break;
        case 110: 
          { lexeme=yytext(); return REFERENCES;
          }
        case 126: break;
        case 45: 
          { lexeme=yytext(); return NULL;
          }
        case 127: break;
        case 78: 
          { lexeme=yytext(); return WHERE;
          }
        case 128: break;
        case 48: 
          { lexeme=yytext(); return BOOL;
          }
        case 129: break;
        case 24: 
          { lexeme=yytext(); return TO;
          }
        case 130: break;
        case 44: 
          { lexeme=yytext(); return INTO;
          }
        case 131: break;
        case 77: 
          { lexeme=yytext(); return FIRST;
          }
        case 132: break;
        case 100: 
          { lexeme=yytext(); return DECLARE;
          }
        case 133: break;
        case 86: 
          { lexeme=yytext(); return UPDATE;
          }
        case 134: break;
        case 50: 
          { lexeme=yytext(); return DROP;
          }
        case 135: break;
        case 33: 
          { lexeme=yytext(); return END;
          }
        case 136: break;
        case 52: 
          { lexeme=yytext(); return OVER;
          }
        case 137: break;
        case 38: 
          { lexeme=yytext(); return KEY;
          }
        case 138: break;
        case 74: 
          { lexeme=yytext(); return PRIOR;
          }
        case 139: break;
        case 9: 
          { lexeme=yytext(); return P_a;
          }
        case 140: break;
        case 5: 
          { lexeme=yytext(); return Operadores;
          }
        case 141: break;
        case 34: 
          { lexeme=yytext(); return SET;
          }
        case 142: break;
        case 64: 
          { lexeme=yytext(); return RESET;
          }
        case 143: break;
        case 4: 
          { /*Ignore*/
          }
        case 144: break;
        case 71: 
          { lexeme=yytext(); return ORDER;
          }
        case 145: break;
        case 65: 
          { lexeme=yytext(); return BEGIN;
          }
        case 146: break;
        case 26: 
          { lexeme=yytext(); return Op_logico;
          }
        case 147: break;
        case 79: 
          { lexeme=yytext(); return WRITE;
          }
        case 148: break;
        case 36: 
          { lexeme=yytext(); return USE;
          }
        case 149: break;
        case 55: 
          { lexeme=yytext(); return FROM;
          }
        case 150: break;
        case 111: 
          { lexeme=yytext(); return TRANSACTION;
          }
        case 151: break;
        case 98: 
          { lexeme=yytext(); return NATURAL;
          }
        case 152: break;
        case 95: 
          { lexeme=yytext(); return UNIQUE;
          }
        case 153: break;
        case 88: 
          { lexeme=yytext(); return EXCEPT;
          }
        case 154: break;
        case 97: 
          { lexeme=yytext(); return CONNECT;
          }
        case 155: break;
        case 66: 
          { lexeme=yytext(); return INNER;
          }
        case 156: break;
        case 12: 
          { lexeme=yytext(); return Llave_c;
          }
        case 157: break;
        case 29: 
          { lexeme=yytext(); return FUN;
          }
        case 158: break;
        case 14: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 159: break;
        case 30: 
          { lexeme=yytext(); return ADD;
          }
        case 160: break;
        case 1: 
          { return ERROR;
          }
        case 161: break;
        case 85: 
          { lexeme=yytext(); return RENAME;
          }
        case 162: break;
        case 75: 
          { lexeme=yytext(); return UNION;
          }
        case 163: break;
        case 27: 
          { lexeme=yytext(); return ON;
          }
        case 164: break;
        case 15: 
          { lexeme=yytext(); return P_coma;
          }
        case 165: break;
        case 16: 
          { lexeme = yytext(); return Op_relacional;
          }
        case 166: break;
        case 60: 
          { lexeme=yytext(); return CHECK;
          }
        case 167: break;
        case 59: 
          { lexeme=yytext(); return JOIN;
          }
        case 168: break;
        case 46: 
          { lexeme=yytext(); return ELSE;
          }
        case 169: break;
        case 68: 
          { lexeme=yytext(); return ILIKE;
          }
        case 170: break;
        case 42: 
          { lexeme=yytext(); return RULE;
          }
        case 171: break;
        case 58: 
          { lexeme=yytext(); return WITH;
          }
        case 172: break;
        case 18: 
          { lexeme=yytext(); return POINT;
          }
        case 173: break;
        case 81: 
          { lexeme=yytext(); return CHANGE;
          }
        case 174: break;
        case 93: 
          { lexeme=yytext(); return SELECT;
          }
        case 175: break;
        case 28: 
          { lexeme=yytext(); return GO;
          }
        case 176: break;
        case 47: 
          { lexeme=yytext(); return THEN;
          }
        case 177: break;
        case 99: 
          { lexeme=yytext(); return TRIGGER;
          }
        case 178: break;
        case 82: 
          { lexeme=yytext(); return CREATE;
          }
        case 179: break;
        case 40: 
          { lexeme=yytext(); return CASE;
          }
        case 180: break;
        case 89: 
          { lexeme=yytext(); return EXISTS;
          }
        case 181: break;
        case 21: 
          { lexeme=yytext(); return C_seleccion;
          }
        case 182: break;
        case 62: 
          { lexeme=yytext(); return ALTER;
          }
        case 183: break;
        case 32: 
          { lexeme=yytext(); return NEW;
          }
        case 184: break;
        case 109: 
          { lexeme=yytext(); return CONSTRAINT;
          }
        case 185: break;
        case 56: 
          { lexeme=yytext(); return FULL;
          }
        case 186: break;
        case 35: 
          { lexeme=yytext(); return OUT;
          }
        case 187: break;
        case 25: 
          { lexeme=yytext(); return DO;
          }
        case 188: break;
        case 53: 
          { lexeme=yytext(); return ONLY;
          }
        case 189: break;
        case 76: 
          { lexeme=yytext(); return USING;
          }
        case 190: break;
        case 39: 
          { lexeme=yytext(); return T_dato;
          }
        case 191: break;
        case 7: 
          { lexeme=yytext(); return All;
          }
        case 192: break;
        case 108: 
          { lexeme=yytext(); return INTERSECT;
          }
        case 193: break;
        case 11: 
          { lexeme=yytext(); return Llave_a;
          }
        case 194: break;
        case 70: 
          { lexeme=yytext(); return START;
          }
        case 195: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 196: break;
        case 13: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 197: break;
        case 31: 
          { lexeme=yytext(); return T_order;
          }
        case 198: break;
        case 41: 
          { lexeme=yytext(); return ROWS;
          }
        case 199: break;
        case 43: 
          { lexeme=yytext(); return VIEW;
          }
        case 200: break;
        case 63: 
          { lexeme=yytext(); return AFTER;
          }
        case 201: break;
        case 6: 
          { return Linea;
          }
        case 202: break;
        case 17: 
          { lexeme=yytext(); return COMA;
          }
        case 203: break;
        case 91: 
          { lexeme=yytext(); return SYSTEM;
          }
        case 204: break;
        case 106: 
          { lexeme=yytext(); return DISTINCT;
          }
        case 205: break;
        case 105: 
          { lexeme=yytext(); return DATABASE;
          }
        case 206: break;
        case 22: 
          { lexeme=yytext(); return IS;
          }
        case 207: break;
        case 104: 
          { lexeme=yytext(); return INTERVAL;
          }
        case 208: break;
        case 92: 
          { lexeme=yytext(); return SEARCH;
          }
        case 209: break;
        case 84: 
          { lexeme=yytext(); return HAVING;
          }
        case 210: break;
        case 54: 
          { lexeme=yytext(); return LR;
          }
        case 211: break;
        case 37: 
          { lexeme=yytext(); return FOR;
          }
        case 212: break;
        case 10: 
          { lexeme=yytext(); return P_c;
          }
        case 213: break;
        case 87: 
          { lexeme=yytext(); return INSERT;
          }
        case 214: break;
        case 96: 
          { lexeme=yytext(); return MODIFY;
          }
        case 215: break;
        case 23: 
          { lexeme=yytext(); return IF;
          }
        case 216: break;
        case 73: 
          { lexeme=yytext(); return PRINT;
          }
        case 217: break;
        case 51: 
          { lexeme=yytext(); return SHOW;
          }
        case 218: break;
        case 102: 
          { lexeme=yytext(); return PRIMARY;
          }
        case 219: break;
        case 107: 
          { lexeme=yytext(); return FUNCTION;
          }
        case 220: break;
        case 57: 
          { lexeme=yytext(); return WHEN;
          }
        case 221: break;
        case 101: 
          { lexeme=yytext(); return DEFAULT;
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
