/* The following code was generated by JFlex 1.4.3 on 13/11/21 2:44 */

package proyecto_catedra_ayc01t_sl190836_ml190272;
import static proyecto_catedra_ayc01t_sl190836_ml190272.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/11/21 2:44 from the specification file
 * <tt>C:/Users/jony2/Documents/NetBeansProjects/ReposAYC-Project-CodeMain/src/proyecto_catedra_ayc01t_sl190836_ml190272/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\46\5\0\1\33"+
    "\1\34\1\35\1\31\1\0\1\3\1\57\1\56\1\4\12\2\1\0"+
    "\1\42\1\45\1\47\1\44\2\0\1\10\1\26\1\6\1\21\1\22"+
    "\1\13\1\51\1\7\1\17\1\53\1\50\1\14\1\23\1\20\1\15"+
    "\1\30\1\54\1\11\1\27\1\16\1\25\1\12\1\32\1\52\1\24"+
    "\1\1\1\40\1\0\1\41\1\0\1\55\1\0\32\1\1\36\1\43"+
    "\1\37\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\22\2\1\5"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\1\2\16\1\1\1\16\3\2\1\17\1\3"+
    "\12\2\1\20\16\2\1\21\2\2\1\22\4\2\1\23"+
    "\1\2\1\24\1\2\1\25\1\26\10\2\1\27\14\2"+
    "\1\30\11\2\1\0\1\21\2\2\1\31\12\2\1\32"+
    "\2\2\1\21\1\33\1\34\14\2\1\35\11\2\1\36"+
    "\7\2\1\37\6\2\1\40\12\2\1\41\6\2\1\42"+
    "\7\2\1\43\5\2\1\0\1\44\2\2\1\37\2\2"+
    "\1\45\12\2\1\46\2\2\1\47\1\2\1\50\1\51"+
    "\3\2\1\52\1\2\1\25\1\53\1\2\1\54\1\2"+
    "\1\55\1\2\1\56\3\2\1\57\1\60\1\2\1\61"+
    "\6\2\1\62\2\2\1\63\5\2\1\64\12\2\1\65"+
    "\10\2\1\66\1\2\1\67\1\70\1\2\1\71\1\2"+
    "\1\72\1\73\5\2\1\74\1\75\1\2\1\76\2\2"+
    "\1\77\1\2\1\100\1\2\1\101\1\102\2\2\1\103"+
    "\1\2\1\104\1\105\14\2\1\106\1\2\1\107\2\2"+
    "\1\110\1\111\3\2\1\112\1\113\1\2\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\2\2\1\122\1\123\1\124"+
    "\2\2\1\125\4\2\1\126\7\2\1\127\1\130\1\131"+
    "\1\132\1\133\1\2\1\134\1\135\1\136\1\2\1\137"+
    "\1\2\1\140\2\2\1\141\2\2\1\142\2\2\1\143"+
    "\1\144\1\145\1\2\1\146\1\2\1\147\1\2\1\150"+
    "\1\151\2\2\1\152\1\153\2\2\1\154\3\2\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\60\0\u0450\0\60\0\u0480\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\u04b0\0\u04e0\0\u0510\0\u04e0\0\60\0\u0540"+
    "\0\u0570\0\u05a0\0\60\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\140\0\u0c30\0\140"+
    "\0\u0c60\0\u0c90\0\140\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\140\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\140\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\60\0\u1260\0\u1290\0\140\0\u12c0"+
    "\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\140\0\u14a0\0\u14d0\0\140\0\140\0\140\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980"+
    "\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00"+
    "\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\140\0\u1bf0\0\u1c20\0\u1c50"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u07e0\0\u1d70\0\140"+
    "\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\140\0\u1ec0"+
    "\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\140\0\u2010"+
    "\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\140\0\u2130\0\u2160"+
    "\0\140\0\u2190\0\u21c0\0\140\0\u21f0\0\u2220\0\u2250\0\u2280"+
    "\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\140\0\u23d0"+
    "\0\u2400\0\140\0\u2430\0\140\0\140\0\u2460\0\u2490\0\u24c0"+
    "\0\140\0\u24f0\0\140\0\140\0\u2520\0\140\0\u2550\0\140"+
    "\0\u2580\0\140\0\u25b0\0\u25e0\0\u2610\0\140\0\140\0\u2640"+
    "\0\140\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760\0\140"+
    "\0\u2790\0\u27c0\0\140\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0"+
    "\0\140\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00"+
    "\0\u2a30\0\u2a60\0\u2a90\0\140\0\u2ac0\0\u2af0\0\u2b20\0\u2b50"+
    "\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\140\0\u2c40\0\140\0\60"+
    "\0\u2c70\0\140\0\u2ca0\0\140\0\140\0\u2cd0\0\u2d00\0\u2d30"+
    "\0\u2d60\0\u2d90\0\140\0\140\0\u2dc0\0\140\0\u2df0\0\u2e20"+
    "\0\140\0\u2e50\0\140\0\u2e80\0\140\0\140\0\u2eb0\0\u2ee0"+
    "\0\140\0\u2f10\0\140\0\140\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0"+
    "\0\u3000\0\u3030\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150"+
    "\0\140\0\u3180\0\140\0\u31b0\0\u31e0\0\140\0\140\0\u3210"+
    "\0\u3240\0\u3270\0\140\0\140\0\u32a0\0\140\0\140\0\140"+
    "\0\140\0\140\0\140\0\u32d0\0\u3300\0\140\0\140\0\140"+
    "\0\u3330\0\u3360\0\140\0\u3390\0\u33c0\0\u33f0\0\u3420\0\140"+
    "\0\u3450\0\u3480\0\u34b0\0\u34e0\0\u3510\0\u3540\0\u3570\0\140"+
    "\0\140\0\140\0\140\0\140\0\u35a0\0\140\0\140\0\140"+
    "\0\u35d0\0\140\0\u3600\0\140\0\u3630\0\u3660\0\140\0\u3690"+
    "\0\u36c0\0\140\0\u36f0\0\u3720\0\140\0\140\0\140\0\u3750"+
    "\0\140\0\u3780\0\140\0\u37b0\0\140\0\140\0\u37e0\0\u3810"+
    "\0\140\0\u3840\0\u3870\0\u38a0\0\140\0\u38d0\0\u3900\0\u3930"+
    "\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\3\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\3\1\52\2\3\1\53\1\2\61\0\2\3"+
    "\3\0\23\3\1\0\1\3\15\0\6\3\5\0\1\4"+
    "\60\0\1\54\54\0\2\3\3\0\1\3\1\55\1\56"+
    "\1\57\3\3\1\60\13\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\2\3\1\61\20\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\4\3\1\62\1\63"+
    "\1\64\3\3\1\65\1\66\5\3\1\67\1\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\7\3\1\70"+
    "\1\3\1\71\2\3\1\72\2\3\1\73\3\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\2\3\1\74"+
    "\6\3\1\75\11\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\2\3\1\76\1\77\2\3\1\100\1\101"+
    "\1\3\1\102\5\3\1\103\3\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\11\3\1\104\2\3\1\105"+
    "\6\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\3\3\1\106\1\107\3\3\1\110\1\3\1\111\4\3"+
    "\1\112\3\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\1\3\1\113\1\114\1\115\3\3\1\116\6\3"+
    "\1\117\4\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\5\3\1\120\1\121\3\3\1\122\6\3\1\123"+
    "\1\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\1\124\1\3\1\125\1\3\1\126\2\3\1\127\4\3"+
    "\1\130\2\3\1\131\3\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\2\3\1\132\1\133\3\3\1\134"+
    "\1\3\1\135\2\3\1\136\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\6\3\1\137\3\3\1\140"+
    "\10\3\1\0\1\3\15\0\2\3\1\141\3\3\3\0"+
    "\2\3\3\0\2\3\1\142\4\3\1\143\1\3\1\144"+
    "\11\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\12\3\1\145\6\3\1\146\1\147\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\150\1\3\1\151"+
    "\4\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\1\3\1\152\6\3\1\153\3\3\1\154\1\3\1\155"+
    "\1\156\3\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\3\3\1\157\17\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\1\3\1\160\1\3\1\161\5\3"+
    "\1\162\11\3\1\0\1\3\15\0\6\3\61\0\1\163"+
    "\43\0\1\164\63\0\1\47\54\0\1\47\2\0\1\47"+
    "\11\0\2\3\3\0\14\3\1\165\6\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\3\3\1\166\3\3"+
    "\1\167\13\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\7\3\1\170\13\3\1\0\1\3\15\0\6\3"+
    "\2\0\5\54\1\0\52\54\1\0\2\3\3\0\2\3"+
    "\1\171\11\3\1\172\6\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\21\3\1\173\1\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\7\3\1\174\4\3"+
    "\1\175\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\6\3\1\176\3\3\1\177\4\3\1\200\3\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\4\3"+
    "\1\201\16\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\23\3\1\0\1\3\15\0\1\3\1\202\4\3"+
    "\3\0\2\3\3\0\10\3\1\203\12\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\10\3\1\204\12\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\13\3"+
    "\1\205\7\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\13\3\1\206\7\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\1\207\22\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\17\3\1\210\3\3\1\0"+
    "\1\211\15\0\6\3\3\0\2\3\3\0\23\3\1\0"+
    "\1\3\15\0\1\3\1\212\4\3\3\0\2\3\3\0"+
    "\12\3\1\213\6\3\1\214\1\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\6\3\1\215\14\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\3\3\1\216"+
    "\2\3\1\217\14\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\220\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\6\3\1\221\14\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\7\3\1\222"+
    "\13\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\7\3\1\223\13\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\3\3\1\224\17\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\3\3\1\225\17\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\6\3\1\226"+
    "\3\3\1\227\10\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\23\3\1\0\1\3\15\0\1\230\5\3"+
    "\3\0\2\3\3\0\5\3\1\231\15\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\13\3\1\232\7\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\233\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\1\3\1\234\21\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\6\3\1\235\14\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\10\3\1\236\12\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\237\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\20\3\1\240\2\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\2\3\1\241\6\3\1\242\5\3"+
    "\1\243\3\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\22\3\1\244\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\11\3\1\245\11\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\10\3\1\246\1\3\1\247"+
    "\1\250\5\3\1\251\1\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\1\3\1\252\21\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\10\3\1\253\12\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\2\3"+
    "\1\254\20\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\10\3\1\205\12\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\23\3\1\0\1\255\15\0\6\3"+
    "\3\0\2\3\3\0\6\3\1\256\6\3\1\257\5\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\10\3"+
    "\1\260\12\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\7\3\1\261\13\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\21\3\1\262\1\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\1\263\4\3\1\264"+
    "\1\265\12\3\1\266\1\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\21\3\1\267\1\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\13\3\1\270\7\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\1\271"+
    "\10\3\1\272\11\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\23\3\1\0\1\3\15\0\2\3\1\202"+
    "\3\3\3\0\2\3\3\0\12\3\1\273\1\274\7\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\12\3"+
    "\1\202\10\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\11\3\1\275\11\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\11\3\1\276\2\3\1\277\6\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\13\3"+
    "\1\300\7\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\10\3\1\301\12\3\1\0\1\3\15\0\1\3"+
    "\1\302\4\3\3\0\2\3\3\0\7\3\1\303\13\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\2\3"+
    "\1\304\20\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\2\3\1\305\3\3\1\306\1\3\1\307\12\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\21\3"+
    "\1\310\1\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\15\3\1\202\5\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\11\3\1\311\11\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\14\3\1\312\6\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\11\3"+
    "\1\313\11\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\10\3\1\314\12\3\1\0\1\3\15\0\6\3"+
    "\4\0\1\315\56\0\2\3\3\0\16\3\1\316\4\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\7\3"+
    "\1\317\13\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\11\3\1\320\11\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\3\3\1\321\6\3\1\322\10\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\1\323"+
    "\22\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\324\6\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\21\3\1\325\1\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\2\3\1\326\20\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\17\3\1\327"+
    "\3\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\12\3\1\330\6\3\1\331\1\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\12\3\1\332\10\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\11\3\1\333"+
    "\11\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\334\6\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\335\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\12\3\1\336\10\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\21\3\1\337"+
    "\1\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\1\3\1\231\21\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\2\3\1\340\20\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\341\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\14\3\1\342"+
    "\6\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\1\124\22\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\17\3\1\343\3\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\23\3\1\0\1\344\15\0\6\3"+
    "\3\0\2\3\3\0\21\3\1\243\1\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\15\3\1\345\5\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\2\3"+
    "\1\346\20\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\14\3\1\347\6\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\21\3\1\350\1\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\6\3\1\351\14\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\1\352"+
    "\22\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\353\6\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\10\3\1\354\12\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\355\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\3\3\1\356"+
    "\17\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\357\6\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\16\3\1\360\4\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\361\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\12\3\1\362"+
    "\10\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\6\3\1\363\14\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\12\3\1\364\10\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\23\3\1\0\1\3\15\0"+
    "\1\3\1\365\4\3\3\0\2\3\3\0\14\3\1\366"+
    "\6\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\367\6\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\23\3\1\0\1\3\15\0\1\370\5\3"+
    "\3\0\2\3\3\0\7\3\1\371\4\3\1\372\6\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\373\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\14\3\1\374\6\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\14\3\1\375\6\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\2\3\1\376\20\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\17\3"+
    "\1\377\3\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\3\3\1\216\17\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\6\3\1\u0100\14\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\14\3\1\u0101\6\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\2\3"+
    "\1\u0102\20\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\22\3\1\u0103\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\10\3\1\u0104\12\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\6\3\1\u0105\2\3\1\u0106"+
    "\11\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\2\3\1\u0107\20\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\u0108\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\u0109\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\14\3\1\u010a"+
    "\6\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\21\3\1\u010b\1\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\u010c\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\11\3\1\u010d\11\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\7\3\1\u010e"+
    "\13\3\1\0\1\3\15\0\4\3\1\u010f\1\3\3\0"+
    "\2\3\3\0\12\3\1\u0110\10\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\2\3\1\u0111\20\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\23\3\1\0"+
    "\1\u0112\15\0\6\3\3\0\2\3\3\0\11\3\1\u0113"+
    "\11\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\23\3\1\0\1\u0114\15\0\6\3\3\0\2\3\3\0"+
    "\3\3\1\u0115\17\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\3\3\1\u0116\17\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\u0117\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\10\3\1\u0118"+
    "\12\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\7\3\1\u0119\2\3\1\u011a\2\3\1\u011b\5\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\3\3\1\u011c"+
    "\6\3\1\u011d\10\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\10\3\1\u011e\12\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\1\3\1\u011f\21\3\1\0"+
    "\1\3\15\0\6\3\4\0\1\315\32\0\1\u0120\23\0"+
    "\2\3\3\0\17\3\1\u0121\3\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\12\3\1\u0122\10\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\23\3\1\0"+
    "\1\3\15\0\1\3\1\u0123\4\3\3\0\2\3\3\0"+
    "\23\3\1\0\1\3\15\0\1\u0124\5\3\3\0\2\3"+
    "\3\0\21\3\1\u0125\1\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\10\3\1\u0126\12\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\15\3\1\u0127\5\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\u0128\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\10\3\1\u0129\12\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\10\3\1\202\12\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\12\3\1\u012a\10\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\3\3"+
    "\1\u012b\17\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\3\3\1\u012c\17\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\13\3\1\202\7\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\15\3\1\u012d\5\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\10\3"+
    "\1\u012e\12\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\14\3\1\u012f\6\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\10\3\1\321\12\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\11\3\1\u0130\11\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\10\3"+
    "\1\u0131\12\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\10\3\1\u0132\12\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\3\3\1\u0133\17\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\3\3\1\u0134\17\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\3\3"+
    "\1\u0135\17\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\14\3\1\u0136\6\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\21\3\1\u0137\1\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\23\3\1\0\1\3"+
    "\15\0\1\3\1\u0138\4\3\3\0\2\3\3\0\14\3"+
    "\1\u0139\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\3\3\1\u013a\17\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\3\3\1\u013b\17\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\23\3\1\0\1\3"+
    "\15\0\2\3\1\u013c\3\3\3\0\2\3\3\0\3\3"+
    "\1\u013d\17\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\3\3\1\321\17\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\3\3\1\u013e\17\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\3\3\1\u013f\17\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\20\3"+
    "\1\u0140\2\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\11\3\1\u0141\11\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\2\3\1\u0142\20\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\15\3\1\u0143\5\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\17\3"+
    "\1\u0144\3\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\10\3\1\u0145\12\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\22\3\1\u0146\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\10\3\1\u0147\12\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\16\3\1\321"+
    "\4\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\5\3\1\u0148\15\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\12\3\1\u0149\10\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\17\3\1\u014a\3\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\23\3\1\0"+
    "\1\3\15\0\1\3\1\u014b\4\3\3\0\2\3\3\0"+
    "\10\3\1\u014c\12\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\u014d\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\12\3\1\u014e\10\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\10\3\1\u014f"+
    "\12\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\1\u0150\22\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\1\u0151\22\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\u0152\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\3\3\1\u0153\17\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\10\3\1\u0154"+
    "\12\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\2\3\1\u0155\20\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\u0156\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\u0157\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\22\3\1\u0158"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\u0159\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\14\3\1\u015a\6\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\12\3\1\u015b\10\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\1\u015c\22\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\3\3\1\u015d"+
    "\17\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\23\3\1\0\1\3\15\0\1\3\1\u015e\4\3\3\0"+
    "\2\3\3\0\14\3\1\u015f\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\21\3\1\u0160\1\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\23\3\1\0"+
    "\1\3\15\0\1\3\1\u0161\4\3\3\0\2\3\3\0"+
    "\11\3\1\u0162\11\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\21\3\1\u0163\1\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\2\3\1\u0164\20\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\14\3\1\u0165"+
    "\6\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\4\3\1\u0166\14\3\1\u0167\1\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\10\3\1\u0168\12\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\2\3\1\u0169"+
    "\20\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\11\3\1\u016a\11\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\2\3\1\u016b\20\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\12\3\1\u016c\10\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\3\3\1\u016d"+
    "\17\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\2\3\1\u016e\20\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\6\3\1\u016f\14\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\u0170\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\10\3\1\u0171"+
    "\12\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\21\3\1\u0172\1\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\16\3\1\u0173\4\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\14\3\1\u0174\6\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\14\3\1\u0160"+
    "\6\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\u0175\6\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\1\3\1\u0176\21\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\10\3\1\u0177\12\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\15\3\1\u0178"+
    "\5\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\3\3\1\u0179\17\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\10\3\1\u017a\12\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\2\3\1\u017b\20\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\12\3\1\u017c"+
    "\10\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\7\3\1\u017d\13\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\1\u017e\22\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\3\3\1\u017f\17\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\2\3\1\u0180\20\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\u0181\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\6\3\1\u0182\14\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\1\321\22\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\21\3\1\u0183\1\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\1\u0184\22\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\14\3"+
    "\1\u0185\6\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\6\3\1\321\14\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\10\3\1\u0186\12\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\12\3\1\353\10\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\16\3"+
    "\1\u0187\4\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\11\3\1\u0188\11\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\12\3\1\u0189\10\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\10\3\1\u018a\12\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\6\3"+
    "\1\u018b\14\3\1\0\1\3\15\0\6\3\3\0\2\3"+
    "\3\0\1\u018c\22\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\14\3\1\u018d\6\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\10\3\1\u018e\12\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\12\3\1\u018f"+
    "\10\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\11\3\1\u0190\11\3\1\0\1\3\15\0\6\3\3\0"+
    "\2\3\3\0\10\3\1\u0191\12\3\1\0\1\3\15\0"+
    "\6\3\3\0\2\3\3\0\10\3\1\u0192\12\3\1\0"+
    "\1\3\15\0\6\3\3\0\2\3\3\0\7\3\1\u0193"+
    "\13\3\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\23\3\1\0\1\3\15\0\5\3\1\u0194\3\0\2\3"+
    "\3\0\12\3\1\u0195\10\3\1\0\1\3\15\0\6\3"+
    "\3\0\2\3\3\0\10\3\1\u0196\12\3\1\0\1\3"+
    "\15\0\6\3\3\0\2\3\3\0\16\3\1\u0197\4\3"+
    "\1\0\1\3\15\0\6\3\3\0\2\3\3\0\22\3"+
    "\1\u0198\1\0\1\3\15\0\6\3\3\0\2\3\3\0"+
    "\14\3\1\u0199\6\3\1\0\1\3\15\0\6\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\22\1\1\11\1\1\1\11"+
    "\1\1\6\11\4\1\1\11\3\1\1\11\107\1\1\0"+
    "\1\11\130\1\1\0\122\1\1\11\171\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 96: 
          { lexeme=yytext(); return FOREIGN;
          }
        case 109: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 110: break;
        case 59: 
          { lexeme=yytext(); return CROSS;
          }
        case 111: break;
        case 81: 
          { lexeme=yytext(); return COLUMN;
          }
        case 112: break;
        case 24: 
          { lexeme=yytext(); return BY;
          }
        case 113: break;
        case 87: 
          { lexeme=yytext(); return DELETE;
          }
        case 114: break;
        case 85: 
          { lexeme=yytext(); return OTHERS;
          }
        case 115: break;
        case 16: 
          { lexeme=yytext(); return AS;
          }
        case 116: break;
        case 66: 
          { lexeme=yytext(); return TABLE;
          }
        case 117: break;
        case 6: 
          { lexeme=yytext(); return COMILLA;
          }
        case 118: break;
        case 69: 
          { lexeme=yytext(); return INDEX;
          }
        case 119: break;
        case 48: 
          { lexeme=yytext(); return TYPE;
          }
        case 120: break;
        case 78: 
          { lexeme=yytext(); return GROUP;
          }
        case 121: break;
        case 65: 
          { lexeme=yytext(); return OUTER;
          }
        case 122: break;
        case 50: 
          { lexeme=yytext(); return NULL;
          }
        case 123: break;
        case 7: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 124: break;
        case 76: 
          { lexeme=yytext(); return WHERE;
          }
        case 125: break;
        case 47: 
          { lexeme=yytext(); return BOOL;
          }
        case 126: break;
        case 19: 
          { lexeme=yytext(); return TO;
          }
        case 127: break;
        case 49: 
          { lexeme=yytext(); return INTO;
          }
        case 128: break;
        case 63: 
          { lexeme=yytext(); return FIRST;
          }
        case 129: break;
        case 99: 
          { lexeme=yytext(); return DECLARE;
          }
        case 130: break;
        case 84: 
          { lexeme=yytext(); return UPDATE;
          }
        case 131: break;
        case 51: 
          { lexeme=yytext(); return DROP;
          }
        case 132: break;
        case 33: 
          { lexeme=yytext(); return END;
          }
        case 133: break;
        case 44: 
          { lexeme=yytext(); return OVER;
          }
        case 134: break;
        case 36: 
          { lexeme=yytext(); return KEY;
          }
        case 135: break;
        case 74: 
          { lexeme=yytext(); return PRIOR;
          }
        case 136: break;
        case 35: 
          { lexeme=yytext(); return SET;
          }
        case 137: break;
        case 62: 
          { lexeme=yytext(); return RESET;
          }
        case 138: break;
        case 3: 
          { /*Ignore*/
          }
        case 139: break;
        case 64: 
          { lexeme=yytext(); return ORDER;
          }
        case 140: break;
        case 72: 
          { lexeme=yytext(); return BEGIN;
          }
        case 141: break;
        case 17: 
          { lexeme=yytext(); return Op_logico;
          }
        case 142: break;
        case 77: 
          { lexeme=yytext(); return WRITE;
          }
        case 143: break;
        case 34: 
          { lexeme=yytext(); return USE;
          }
        case 144: break;
        case 41: 
          { lexeme=yytext(); return FROM;
          }
        case 145: break;
        case 108: 
          { lexeme=yytext(); return TRANSACTION;
          }
        case 146: break;
        case 98: 
          { lexeme=yytext(); return NATURAL;
          }
        case 147: break;
        case 91: 
          { lexeme=yytext(); return UNIQUE;
          }
        case 148: break;
        case 88: 
          { lexeme=yytext(); return EXCEPT;
          }
        case 149: break;
        case 95: 
          { lexeme=yytext(); return CONNECT;
          }
        case 150: break;
        case 68: 
          { lexeme=yytext(); return INNER;
          }
        case 151: break;
        case 10: 
          { lexeme=yytext(); return Llave_c;
          }
        case 152: break;
        case 26: 
          { lexeme=yytext(); return FUN;
          }
        case 153: break;
        case 12: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 154: break;
        case 27: 
          { lexeme=yytext(); return ADD;
          }
        case 155: break;
        case 1: 
          { return ERROR;
          }
        case 156: break;
        case 83: 
          { lexeme=yytext(); return RENAME;
          }
        case 157: break;
        case 70: 
          { lexeme=yytext(); return UNION;
          }
        case 158: break;
        case 18: 
          { lexeme=yytext(); return ON;
          }
        case 159: break;
        case 13: 
          { lexeme=yytext(); return P_coma;
          }
        case 160: break;
        case 14: 
          { lexeme = yytext(); return Op_relacional;
          }
        case 161: break;
        case 58: 
          { lexeme=yytext(); return CHECK;
          }
        case 162: break;
        case 57: 
          { lexeme=yytext(); return JOIN;
          }
        case 163: break;
        case 52: 
          { lexeme=yytext(); return ELSE;
          }
        case 164: break;
        case 67: 
          { lexeme=yytext(); return ILIKE;
          }
        case 165: break;
        case 39: 
          { lexeme=yytext(); return RULE;
          }
        case 166: break;
        case 55: 
          { lexeme=yytext(); return WITH;
          }
        case 167: break;
        case 15: 
          { lexeme=yytext(); return POINT;
          }
        case 168: break;
        case 79: 
          { lexeme=yytext(); return CHANGE;
          }
        case 169: break;
        case 93: 
          { lexeme=yytext(); return SELECT;
          }
        case 170: break;
        case 25: 
          { lexeme=yytext(); return GO;
          }
        case 171: break;
        case 46: 
          { lexeme=yytext(); return THEN;
          }
        case 172: break;
        case 97: 
          { lexeme=yytext(); return TRIGGER;
          }
        case 173: break;
        case 80: 
          { lexeme=yytext(); return CREATE;
          }
        case 174: break;
        case 37: 
          { lexeme=yytext(); return CASE;
          }
        case 175: break;
        case 89: 
          { lexeme=yytext(); return EXISTS;
          }
        case 176: break;
        case 21: 
          { lexeme=yytext(); return C_seleccion;
          }
        case 177: break;
        case 61: 
          { lexeme=yytext(); return ALTER;
          }
        case 178: break;
        case 32: 
          { lexeme=yytext(); return NEW;
          }
        case 179: break;
        case 107: 
          { lexeme=yytext(); return CONSTRAINT;
          }
        case 180: break;
        case 42: 
          { lexeme=yytext(); return FULL;
          }
        case 181: break;
        case 30: 
          { lexeme=yytext(); return OUT;
          }
        case 182: break;
        case 23: 
          { lexeme=yytext(); return DO;
          }
        case 183: break;
        case 45: 
          { lexeme=yytext(); return ONLY;
          }
        case 184: break;
        case 71: 
          { lexeme=yytext(); return USING;
          }
        case 185: break;
        case 31: 
          { lexeme=yytext(); return T_dato;
          }
        case 186: break;
        case 5: 
          { lexeme=yytext(); return All;
          }
        case 187: break;
        case 106: 
          { lexeme=yytext(); return INTERSECT;
          }
        case 188: break;
        case 9: 
          { lexeme=yytext(); return Llave_a;
          }
        case 189: break;
        case 73: 
          { lexeme=yytext(); return START;
          }
        case 190: break;
        case 56: 
          { lexeme=yytext(); return Numero;
          }
        case 191: break;
        case 11: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 192: break;
        case 28: 
          { lexeme=yytext(); return T_order;
          }
        case 193: break;
        case 38: 
          { lexeme=yytext(); return ROWS;
          }
        case 194: break;
        case 40: 
          { lexeme=yytext(); return VIEW;
          }
        case 195: break;
        case 60: 
          { lexeme=yytext(); return AFTER;
          }
        case 196: break;
        case 4: 
          { return Linea;
          }
        case 197: break;
        case 8: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 198: break;
        case 94: 
          { lexeme=yytext(); return SYSTEM;
          }
        case 199: break;
        case 105: 
          { lexeme=yytext(); return DISTINCT;
          }
        case 200: break;
        case 104: 
          { lexeme=yytext(); return DATABASE;
          }
        case 201: break;
        case 22: 
          { lexeme=yytext(); return IS;
          }
        case 202: break;
        case 103: 
          { lexeme=yytext(); return INTERVAL;
          }
        case 203: break;
        case 92: 
          { lexeme=yytext(); return SEARCH;
          }
        case 204: break;
        case 82: 
          { lexeme=yytext(); return HAVING;
          }
        case 205: break;
        case 43: 
          { lexeme=yytext(); return LR;
          }
        case 206: break;
        case 29: 
          { lexeme=yytext(); return FOR;
          }
        case 207: break;
        case 86: 
          { lexeme=yytext(); return INSERT;
          }
        case 208: break;
        case 90: 
          { lexeme=yytext(); return MODIFY;
          }
        case 209: break;
        case 20: 
          { lexeme=yytext(); return IF;
          }
        case 210: break;
        case 75: 
          { lexeme=yytext(); return PRINT;
          }
        case 211: break;
        case 53: 
          { lexeme=yytext(); return SHOW;
          }
        case 212: break;
        case 101: 
          { lexeme=yytext(); return PRIMARY;
          }
        case 213: break;
        case 102: 
          { lexeme=yytext(); return FUNCTION;
          }
        case 214: break;
        case 54: 
          { lexeme=yytext(); return WHEN;
          }
        case 215: break;
        case 100: 
          { lexeme=yytext(); return DEFAULT;
          }
        case 216: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
